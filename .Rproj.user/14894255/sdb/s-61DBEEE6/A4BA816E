{
    "contents" : "#  Table of Contents (Generated using: nl -b a Beautiful\\ Plotting.R | grep \"[0-9]* *#\")\n#Line Number: 62 ### Working with the title - page 4 of the Beautiful Plots pdf\n#Line Number: 64    # Add a title\n#Line Number: 66\t  # or\n#Line Number: 68\t  # Make title bold and add a little space at the baseline (face,vjust)\n#Line Number: 70\t  # Use a non-traditional font in your title (family)\n#Line Number: 73\t  # Change spacing in multi-line text (lineheight)\n#Line Number: 76\t### Working with axes - page 8 of the Beautiful Plots pdf\n#Line Number: 77\t  # Add x and y axis labels (labs(),xlab())\n#Line Number: 79\t  # Get rid of axis ticks and tick text (theme(),axis.ticks.y)\n#Line Number: 81\t  # Change size of and rotate tick text (axis.text.x)\n#Line Number: 83\t  # Move the labels away from the plot (and add color) (theme(), axis.title.x)\n#Line Number: 88\t  # Limit an axis to a range (ylim(),scale_x_continuous(), coord_cartesian())\n#Line Number: 90\t  # or\n#Line Number: 92\t  # Use a function to alter labels (label=function(x){})\n#Line Number: 97\t### Working with Legends - page 15 of the Beautiful Plots pdf\n#Line Number: 106\t  # Turn off the legend title (legend.title)\n#Line Number: 108\t  # Change the styling of the legend title (legend.title)\n#Line Number: 110\t  # Change the title of the legend (name), this also splits the legends\n#Line Number: 112\t  # Change the background boxes in the legend (legend.key)\n#Line Number: 115\t  # Change the size of the symbols in the legend only (guides(), guide_legend)\n#Line Number: 117\t  # This is a bad example but it shows how to turn off a legend layer.\n#Line Number: 120\t  # Manual Legends - page 23 of the Beautiful Plots pdf\n#Line Number: 124\t### Background Colors - page 27 of the Beautiful Plots pdf\n#Line Number: 126\t  # Change the panel color (panel.background)\n#Line Number: 128\t  # Change the grid lines (panel.grid.major)\n#Line Number: 132\t  # Change the plot background (not the panel) color (plot.background)\n#Line Number: 134\t### Creating multi-panel plots - page 30 of the Beautiful Plots pdf\n#Line Number: 135\t  # Changing the plot margin (plot.margin)\n#Line Number: 137\t### Creating multi-panel plots - page 32 of the Beautiful Plots pdf\n#Line Number: 139\t  # Allow scales to roam free (scales)\n#Line Number: 141\t  # Put two (potentially unrelated) plots side by side (pushViewport())\n#Line Number: 148\t### Working with themes - page 37 of the Beautiful Plots pdf - see also https://github.com/jrnold/ggthemes\n#Line Number: 152\t  # Creating a custom theme - See page 39 of the Beautiful Plots pdf\n#Line Number: 153\t### Working with colors - page 41 of the Beautiful Plots pdf\n#Line Number: 154\t  # Categorical variables: manually select the colors (scale_color_manual())\n#Line Number: 155\tggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + scale_color_manual(values=c(\"dodgerblue4\", \"darkolivegreen4\", \"darkorchid3\", \"goldenrod1\")) # Uncomment this to get an error\n#Line Number: 158\t  # Categorical variables: try a built-in palette (based on colorbrewer2.org) (scale_color_brewer()):\n#Line Number: 160\t  # How about using the Tableau colors (but you need the library ggthemes):\n#Line Number: 162\t  # Color choice with continuous variables (scale_color_gradient(), scale_color_gradient2())\n#Line Number: 168\t### Working with annotation - page 47 of the Beautiful Plots pdf\n#Line Number: 169\t  # Add text annotation in the top-right, top-left etc. (annotation_custom() andtextGrob())\n#Line Number: 170\t  # The grobTreefunction (from grid) creates a grid graphical object and textGrobcreates the text graphical object. The annotation_custom() function comes from ggplot2and is designed to use a grob as input.\n#Line Number: 178\t### Working with coordinates - page 49 of the Beautiful Plots pdf\n#Line Number: 183\t### Working with plot types - page 50 of the Beautiful Plots pdf\n#Line Number: 184\t  # Box plot\n#Line Number: 186\t  # Alternative to a box plot: plot of points\n#Line Number: 193\t  # Alternative to a box plot: violin plot perhaps (geom_violin())\n#Line Number: 199\t  # Add a ribbon to your plot (geom_ribbon())\n#Line Number: 201\t  # The following are commented out because they take a very long time to run.\n#Line Number: 202\t  # ggplot(joindf, aes(x=year(SALES_DATE), y=tbl)) + geom_line()\n#Line Number: 204\t  # ggplot(joindf, aes(x=year(SALES_DATE), y=tbl)) + geom_line() + geom_ribbon(aes(ymin=0,ymax=tbl),fill=\"lightpink3\")\n#Line Number: 206\t### Working with smooths - page 60 of the Beautiful Plots pdf\n# End Table of Contents\n\nrequire(\"tidyr\")\nrequire(\"dplyr\")\nrequire(\"jsonlite\")\ni = 'cut'\nr <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query=\"select \\\\\\\"\"i\"\\\\\\\", count(*) n from DIAMONDS group by \\\\\\\"\"i\"\\\\\\\" \"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDB1.usuniversi01134.oraclecloud.internal',USER='DV_Diamonds',PASS='orcl',MODE='native_mode',MODEL='model',returnDimensions = 'False',returnFor = 'JSON', i=i),verbose = TRUE)))\nnames(r) <- c(\"x\", \"n\")\n### Working with the title - page 4 of the Beautiful Plots pdf\ng <- ggplot(r, aes(x=x, y=n)) + geom_point(color=\"firebrick\"); g\n  # Add a title\ng <- g + ggtitle('Cut'); g\n  # or\ng + labs(title='Cut')\n  # Make title bold and add a little space at the baseline (face,vjust)\ng <- g + theme(plot.title=element_text(size=20, face=\"bold\", vjust=2)); g\n  # Use a non-traditional font in your title (family)\nlibrary(extrafont)\ng <- g + theme(plot.title=element_text(size=30, face=\"bold\", vjust=1, family=\"Bauhaus93\")); g\n  # Change spacing in multi-line text (lineheight)\ng <- g + labs(title='This is a longer\\ntitle than expected'); g\ng <- g + theme(plot.title=element_text(size=30, face=\"bold\", vjust=1, lineheight=1.0)); g\n### Working with axes - page 8 of the Beautiful Plots pdf\n  # Add x and y axis labels (labs(),xlab())\ng <- g + labs(x=\"Cut\", y=paste(\"Cut\", \"Numbers\")); g\n  # Get rid of axis ticks and tick text (theme(),axis.ticks.y)\ng + theme(axis.ticks.y=element_blank(), axis.text.y=element_blank())\n  # Change size of and rotate tick text (axis.text.x)\ng <- g + theme(axis.text.x=element_text(angle=50, size=20, vjust=0.5)); g\n  # Move the labels away from the plot (and add color) (theme(), axis.title.x)\ng <- g + theme(\n  axis.title.x=element_text(color=\"forestgreen\", vjust=0.35),\n  axis.title.y=element_text(color=\"cadetblue\", vjust=0.35)\n); g \n  # Limit an axis to a range (ylim(),scale_x_continuous(), coord_cartesian())\ng + ylim(c(0,10000))\n  # or\ng + scale_y_continuous(limits=c(0,10000))\n  # Use a function to alter labels (label=function(x){})\ng + scale_y_continuous(label=function(x){return(paste(\"My cut number is \",x))}, limits=c(0,10000))\n\nr <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query=\"select \\\\\\\"clarity\\\\\\\", \\\\\\\"\"i\"\\\\\\\", count(*) n from DIAMONDS group by \\\\\\\"clarity\\\\\\\", \\\\\\\"\"i\"\\\\\\\" \"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDB1.usuniversi01134.oraclecloud.internal',USER='DV_Diamonds',PASS='orcl',MODE='native_mode',MODEL='model',returnDimensions = 'False',returnFor = 'JSON', i=i),verbose = TRUE)))\n\n### Working with Legends - page 15 of the Beautiful Plots pdf\nnames(r) <- c(\"legend\", \"x\", \"n\")\ng <- ggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point()\ng <- g + labs(title='Cut') +\n  labs(x=\"Cut\", y=paste(\"Cut\", \"Numbers\")) + \n  theme(\n    axis.title.x=element_text(color=\"forestgreen\", vjust=0.35),\n    axis.title.y=element_text(color=\"cadetblue\", vjust=0.35)\n  ); g\n  # Turn off the legend title (legend.title)\ng + theme(legend.title=element_blank())\n  # Change the styling of the legend title (legend.title)\ng + theme(legend.title=element_text(colour=\"chocolate\",size=16,face=\"bold\"))\n  # Change the title of the legend (name), this also splits the legends\ng + scale_color_discrete(name=\"The types of\\nclarity are:\")\n  # Change the background boxes in the legend (legend.key)\ns <- g + theme(legend.key=element_rect(fill='blue')); s\ns <- g + theme(legend.key=element_rect(fill=NA)); s\n  # Change the size of the symbols in the legend only (guides(), guide_legend)\ng + guides(colour=guide_legend(override.aes=list(size=6)), show_guide=FALSE)\n  # This is a bad example but it shows how to turn off a legend layer.\ns <- g + geom_histogram(aes(x=x)); s \ns <- g + geom_histogram(aes(x=x), show_guide=FALSE); s\n  # Manual Legends - page 23 of the Beautiful Plots pdf\ng <- ggplot(r, aes(x=x, y=n)) + geom_line(color=\"grey\") + geom_point(color=\"red\"); g\ng <- g + geom_line(aes(color=\"Important line\")) + geom_point(aes(color=\"My points\")); g\ng <- g + scale_colour_manual(name='',values=c('Important line'='red','My points'='blue')); g\n### Background Colors - page 27 of the Beautiful Plots pdf\ng <- ggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point(); g\n  # Change the panel color (panel.background)\ng <- g + theme(panel.background=element_rect(fill='grey75')); g\n  # Change the grid lines (panel.grid.major)\ng <- g + theme(\n    panel.grid.major=element_line(colour=\"orange\",size=2),\n    panel.grid.minor=element_line(colour=\"blue\")); g\n  # Change the plot background (not the panel) color (plot.background)\ng <- g + theme(plot.background=element_rect(fill='blue')); g\n### Creating multi-panel plots - page 30 of the Beautiful Plots pdf\n  # Changing the plot margin (plot.margin)\ng <- g + theme(plot.margin=unit(c(1,6,1,6),\"cm\")); g\n### Creating multi-panel plots - page 32 of the Beautiful Plots pdf\ng <- ggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + facet_wrap(~legend,nrow=1); g\n  # Allow scales to roam free (scales)\nggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + facet_wrap(~legend, nrow=1,scale=\"free\")\n  # Put two (potentially unrelated) plots side by side (pushViewport())\np1 <- ggplot(r, aes(x=legend, y=n, size=x, color=x)) + geom_point()\np2 <- ggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point()\nrequire(grid)\npushViewport(viewport(layout=grid.layout(1,2)))\nprint(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))\nprint(p2,vp=viewport(layout.pos.row=1,layout.pos.col=2))\n### Working with themes - page 37 of the Beautiful Plots pdf - see also https://github.com/jrnold/ggthemes\ng <- ggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + facet_wrap(~legend,nrow=1); g\nrequire(ggthemes)\ng + theme_economist()+scale_colour_economist()\n  # Creating a custom theme - See page 39 of the Beautiful Plots pdf\n### Working with colors - page 41 of the Beautiful Plots pdf\n  # Categorical variables: manually select the colors (scale_color_manual())\n  # ggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + scale_color_manual(values=c(\"dodgerblue4\", \"darkolivegreen4\", \"darkorchid3\", \"goldenrod1\")) # Uncomment this to get an error\nggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + \n  scale_color_manual(values=c(\"dodgerblue4\",\"darkolivegreen4\", \"darkorchid3\", \"goldenrod1\", \"blue\",\"green\",\"yellow\",\"red\"))\n  # Categorical variables: try a built-in palette (based on colorbrewer2.org) (scale_color_brewer()):\nggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + scale_color_brewer(palette=\"Set1\")\n  # How about using the Tableau colors (but you need the library ggthemes):\nggplot(r, aes(x=x, y=n, size=legend, color=legend)) + geom_point() + scale_colour_tableau()\n  # Color choice with continuous variables (scale_color_gradient(), scale_color_gradient2())\nggplot(r, aes(x=x, y=n, color=n)) + geom_point() + scale_color_gradient(low=\"darkkhaki\",high=\"darkgreen\")\n\nmid <- mean(r$n)\nggplot(r, aes(x=x, y=n, color=n)) + geom_point() +\n  scale_color_gradient2(midpoint=mid, low=\"green\", mid= \"yellow\",high=\"red\")\n### Working with annotation - page 47 of the Beautiful Plots pdf\n  # Add text annotation in the top-right, top-left etc. (annotation_custom() andtextGrob())\n  # The grobTreefunction (from grid) creates a grid graphical object and textGrobcreates the text graphical object. The annotation_custom() function comes from ggplot2and is designed to use a grob as input.\n\nrequire(grid)\nmy_grob=grobTree(textGrob(\"This text stays in place!\",x=0.1, y=0.95,hjust=0, gp=gpar(col=\"blue\",fontsize=15,fontface=\"italic\")))\ng <- ggplot(r, aes(x=x, y=n, color=n)) + geom_point() +\n  scale_color_gradient2(midpoint=mid, low=\"green\", mid= \"yellow\",high=\"red\") +\n  annotation_custom(my_grob); g\ng + facet_wrap(~legend)\n### Working with coordinates - page 49 of the Beautiful Plots pdf\ng <- ggplot(r, aes(x=x, y=n, color=n)) + geom_point() +\n  scale_color_gradient2(midpoint=mid, low=\"green\", mid= \"yellow\",high=\"red\") +\n  facet_wrap(~legend); g\ng + coord_flip()\n### Working with plot types - page 50 of the Beautiful Plots pdf\n  # Box plot\nggplot(r, aes(x=x, y=n)) + geom_boxplot(fill=\"darkseagreen4\")\n  # Alternative to a box plot: plot of points\np1 <- ggplot(r, aes(x=x, y=n)) + geom_point()\np2 <- ggplot(r, aes(x=x, y=n)) + geom_jitter(alpha=1,aes(color=legend),position=position_jitter(width=.3))\nrequire(grid)\npushViewport(viewport(layout=grid.layout(1,3)))\nprint(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))\nprint(p2,vp=viewport(layout.pos.row=1,layout.pos.col=2:3))\n  # Alternative to a box plot: violin plot perhaps (geom_violin())\ng <- ggplot(r, aes(x=x, y=n)) + geom_jitter(alpha=1,aes(color=legend),position=position_jitter(width=.1)) + geom_violin(alpha=0.5,color=\"gray\"); g\ng + coord_flip()\n\njoindf <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query=\"select * from DIAMONDS d join diam_sale s on (d.\\\\\\\"diamond_id\\\\\\\" = s.diamond_id) join diam_retailer r on (s.retailer_id = r.retailer_id)\"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDB1.usuniversi01134.oraclecloud.internal',USER='DV_Diamonds',PASS='orcl',MODE='native_mode',MODEL='model',returnDimensions = 'False',returnFor = 'JSON'),verbose = TRUE)))\n\n  # Add a ribbon to your plot (geom_ribbon())\nrequire(lubridate)\n  # The following are commented out because they take a very long time to run.\n  # ggplot(joindf, aes(x=year(SALES_DATE), y=tbl)) + geom_line()\n\n  # ggplot(joindf, aes(x=year(SALES_DATE), y=tbl)) + geom_line() + geom_ribbon(aes(ymin=0,ymax=tbl),fill=\"lightpink3\")\n\n### Working with smooths - page 60 of the Beautiful Plots pdf\nggplot(joindf, aes(x=day(SALES_DATE), y=tbl)) + geom_point() + stat_smooth()\n",
    "created" : 1425480088104.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1613098954",
    "id" : "A4BA816E",
    "lastKnownWriteTime" : 1424991648,
    "path" : "~/Documents/UT/Semester8/DataVisualization/DrCannata/RWorkshop/11 Beautiful Plotting/Beautiful Plotting.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}